
<% if @projects.empty? %>
  <div class="d-flex justify-content-center align-items-center" style="height: 80vh;">
    <div class="card text-center">
      <div class="card-header">No projects found</div>
      <div class="card-body">
        <p class="card-text">You have not created any projects yet.</p>
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#projectModal">
          Create new Project
        </button>
      </div>
    </div>
  </div>
<% else %>
  <h1>Projects</h1>
 <table class="table table-bordered">
  <thead>
    <tr>
      <th>Name</th>
      <th>Client</th>
      <th>Total Time</th>
      <th>Actions</th>
    </tr>
  </thead>
  <tbody>
    <% @projects.each do |project| %>
      <tr>
        <td><%= project.name %></td>
        <td><%= project.client %></td>
        <td><span id="total-time-<%= project.id %>"><%= format_time(project.total_time) %></span></td>
        <td>
          <%= link_to "", project, method: :delete, class: "bi bi-trash3 text-danger", data: { confirm: "Are you sure you want to delete this project?" } %>
        </td>
        <td>
          <p>
            <a class="btn btn-primary" data-bs-toggle="collapse" href="#<%= project.name %>" role="button" aria-expanded="false" aria-controls="<%= project.name %>">
              Tasks
            </a>
          </p>
        </td>
      </tr>
      <tr>
        <td colspan="5">
          <div class="collapse" id="<%= project.name %>">
            <div class="card card-body">
              <% if project.tasks.any? %>
                <table class="table table-bordered">
                  <thead>
                    <tr>
                      <th>Name</th>
                      <th>Description</th>
                      <th>Time</th>
                      <th>Action</th>
                    </tr>
                  </thead>
                  <tbody>
                    <% project.tasks.each do |task| %>
                      <tr>
                        <td><%= task.name %></td>
                        <td><%= task.description %></td>
                        <td class="task-time"><span id="elapsed-time-<%= task.id %>"><%= task.time %></span></td>
                        <td>
                          <div class="btn-group" role="group">
                            <button class="btn btn-primary start-timer" data-task-id="<%= task.id %>" data-project-id="<%= task.project.id %>">Start timer</button>
                            <button class="btn btn-danger stop-timer" data-task-id="<%= task.id %>" data-task-project-id="<%= task.project %>">Stop timer</button>
                          </div>
                            <%= link_to "", task, method: :delete, class: "bi bi-trash3 text-danger", data: { confirm: "Are you sure you want to delete this project?" } %>
                        </td>
                      </tr>
                    <% end %>
                  </tbody>
                </table>
              <% else %>
                <p>No tasks found for this project.</p>
              <% end %>
            </div>
            <button type="button" class="btn btn-success m-2" data-bs-toggle="modal" data-bs-target="#taskModel<%= project.id %>">
              Create new Task
            </button>
          </div>
          <div class="modal fade" id="taskModel<%= project.id %>" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog">
              <div class="modal-content">
                <div class="modal-header">
                  <h1 class="modal-title fs-5" id="exampleModalLabel">Add a task to <%= project.name %></h1>
                  <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                  <%= render "tasks/form", task: @task, project: project %>
                </div>
              </div>
            </div>
          </div>
        </td>
      </tr>
    <% end %>
  </tbody>
</table>

  <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#projectModal">
    Create new Project
  </button>
<% end %>

<!-- Modal -->
<div class="modal fade" id="projectModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="exampleModalLabel">Add a project</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <%= render "form", project: @project %>
      </div>
    </div>
  </div>
</div>

<script>
  var currentTimerId = null;
  var timers = {};
  var elapsedTimes = {};

  function format_time(totalSeconds) {
  var hours = Math.floor(totalSeconds / 3600);
  var minutes = Math.floor((totalSeconds - (hours * 3600)) / 60);
  var seconds = totalSeconds - (hours * 3600) - (minutes * 60);

  hours = String(hours).padStart(2, "0");
  minutes = String(minutes).padStart(2, "0");
  seconds = String(seconds).padStart(2, "0");

  return hours + ":" + minutes + ":" + seconds;
  }

 function updateTotalTime(projectId) {
  var csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute("content");

  var url = "/projects/" + projectId + "/project_tasks";

  fetch(url, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        "X-CSRF-Token": csrfToken
      },
    })
  .then(response => response.json())
  .then(data => {
    var totalTimeElement = document.querySelector("#total-time-" + projectId);
    totalTimeElement.textContent = format_time(data.total_time);

    fetch(`/projects/${projectId}`, {
      method: "PATCH",
      headers: {
        "Content-Type": "application/json",
        "X-CSRF-Token": csrfToken
      },
      body: JSON.stringify({ project: { total_time : data.total_time } })
    })
    .then(function(response) {
      if (response.ok) {
        console.log("Time elapsed updated successfully!");
      } else {
        console.error("Failed to update time elapsed.");
      }
    })
    .catch(function(error) {
      console.error("Failed to update time elapsed:", error);
    });
  })
  .catch(error => {
    console.error('Failed to retrieve project tasks:', error);
  });
  }

  function stopTimer(taskId , projectId) {
    if (!timers[taskId]) {
      return;
    }

    clearInterval(timers[taskId]);
    var startButton = document.querySelector("button.start-timer[data-task-id='" + taskId + "']");

    startButton.disabled = false;
    var stopButton = document.querySelector("button.stop-timer[data-task-id='" + taskId + "']");
    stopButton.disabled = true;

    var elapsedTime = elapsedTimes[taskId];
    var taskEl = document.getElementById("elapsed-time-" + taskId);
    taskEl.textContent = elapsedTime;

    var csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute("content");
    var url = "/tasks/" + taskId;

    fetch(url, {
      method: "PATCH",
      headers: {
        "Content-Type": "application/json",
        "X-CSRF-Token": csrfToken
      },
      body: JSON.stringify({ task: { time: elapsedTime } })
    })
    .then(function(response) {
      if (response.ok) {
        console.log("Time elapsed updated successfully!");
      } else {
        console.error("Failed to update time elapsed.");
      }
    })
    .catch(function(error) {
      console.error("Failed to update time elapsed:", error);
    });

    updateTotalTime(projectId);
    currentTimerId = null;
  }

  document.querySelectorAll(".start-timer").forEach(function(startButton) {
    var taskId = startButton.dataset.taskId;
    var initialTime = startButton.dataset.initialTime;
    var projectId = startButton.dataset.projectId;

    startButton.addEventListener("click", function() {
      if (currentTimerId) {
        stopTimer(currentTimerId , projectId);
      }

      elapsedTimes[taskId] = parseInt(document.getElementById("elapsed-time-" + taskId).textContent || initialTime);
      timers[taskId] = setInterval(function() {
        elapsedTimes[taskId]++;
        document.getElementById("elapsed-time-" + taskId).textContent = elapsedTimes[taskId];

        // Enable the "Stop Timer" button if the counter is working
        var stopButton = document.querySelector("button.stop-timer[data-task-id='" + taskId + "']");
        stopButton.disabled = false;
      }, 1000);

      startButton.disabled = true;
      currentTimerId = taskId;
    });

    var stopButton = startButton.nextElementSibling;
    stopButton.addEventListener("click", function() {
      stopTimer(taskId , projectId);
    });
  });
</script>


